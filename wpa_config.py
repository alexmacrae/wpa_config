#!/usr/share/python2
# -*- coding: utf-8 -*-
#
# wpa_config - a config manager for wpa_supplicant
#
# Author: slowpoke <mail+git@slowpoke.io>
#
# This program is Free Software under the non-terms
# of the Anti-License. Do whatever the fuck you want.
#
# Github: https://github.com/proxypoke/wpa_config

"""wpa_config - a small helper for wpa_supplicant."""


import argparse
import subprocess
import os


CONFIG_ROOT = "/etc/wpa_config"
CONFIG_SELF = os.path.join(CONFIG_ROOT, "wpa_config.conf")
CONFIG_HEAD = os.path.join(CONFIG_ROOT, "wpa_supplicant.conf.head")
CONFIG_TAIL = os.path.join(CONFIG_ROOT, "wpa_supplicant.conf.tail")
NETWORK_DIR = os.path.join(CONFIG_ROOT, "networks.d")
WPA_SUPPLICANT_CONFIG = "/etc/wpa_supplicant/wpa_supplicant.conf"


def merge_files(network_dir=None):
    """Merge all files in the network_dir directory."""
    network_dir = NETWORK_DIR if network_dir is None else network_dir
    cfiles = [os.path.join(network_dir, cfile)
              for cfile in os.listdir(network_dir)
              if cfile.endswith(".conf")]
    merge = ""
    for cfile in cfiles:
        with open(cfile) as f:
            merge += f.read()
    return merge


def mkentry(ssid, passphrase):
    """Call wpa_passphrase to generate an entry for the config.

    Arguments:
        ssid       -- the name of the network
        passphrase -- the passphrase

    """
    # TODO: make reading from stdin possible
    return subprocess.check_output(["wpa_passphrase",
                                    ssid, '"{}"'.format(passphrase)])


def mkconfigfile(ssid, network_dir=None):
    """Create a config file in the config file directory.

    Returns:
        the created config file as a file object.

    """
    network_dir = NETWORK_DIR if network_dir is None else network_dir
    #cfile = tempfile.mkstemp(prefix=ssid + "_",
                             #suffix=".conf",
                             #dir=network_dir)
    #return os.fdopen(cfile[0], "w")
    return open(os.path.join(network_dir, ssid + ".conf"))


# Commands for the CLI frontend

def add(args):
    # TODO: input sanity checking
    entry = mkentry(args.ssid, args.passphrase)
    try:
        cfile = mkconfigfile(args.ssid, args.directory)
        cfile.write(entry)
    except OSError, e:
        print("Couldn't write config file: {}".format(e))
        exit(1)
    cfile.close()


def make(args):
    with open(CONFIG_HEAD) as headfile:
        config_head = headfile.read()
    with open(CONFIG_TAIL) as tailfile:
        config_tail = tailfile.read()

    config = "# This file was generated by wpa_config. DO NOT EDIT."
    config += "\n\n"
    config += config_head
    config += "\n\n"
    config += merge_files()
    config += "\n\n"
    config += config_tail

    try:
        with open(WPA_SUPPLICANT_CONFIG, "w") as cfile:
            cfile.write(config)
    except OSError, e:
        print("Couldn't write config file: {}".format(e))
        exit(1)


def main():
    parser = argparse.ArgumentParser()
    commands = parser.add_subparsers()

    add_mode = commands.add_parser("add", help="add a network")
    add_mode.add_argument("ssid", type=str, help="network name")
    add_mode.add_argument("passphrase", type=str, help="wpa passphrase")
    add_mode.add_argument("-d", "--directory", type=str,
                          help="directory to use as base (default: {})".format(
                              CONFIG_ROOT))
    add_mode.set_defaults(func=add)

    make_mode = commands.add_parser("make", help="create the config")
    make_mode.set_defaults(func=make)

    help_mode = commands.add_parser("help", help="print this help")
    help_mode.set_defaults(func=lambda _: parser.print_help())

    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
